{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst user = 'hello';\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const register = createAsyncThunk('auth/fetchLogin',\n/**  @param arg {object} */\nasync (user, thunkAPI) => {\n  try {\n    const response = await axios.post('http://localhost:5000/api/register', user, {\n      headers: {\n        'content-type': 'text/json'\n      }\n    });\n    const data = await response.data;\n    return data;\n  } catch (error) {\n    const message = error.response && error.response.data;\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  // NOT ASYNC\n  reducers: {\n    reset: state => {\n      state.isLoading = state.isError = state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  // ASYNC\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      console.log('fetching exercises...');\n    }), builder.addCase(register.fulfilled, (state, action) => {\n      console.log('fetching exercises...');\n    }), builder.addCase(register.rejected, (state, action) => {\n      console.log('fetching exercises...');\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/stephen/business/journal-full/frontend/src/redux/authSlice.ts"],"names":["createSlice","createAsyncThunk","axios","user","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","response","post","headers","data","error","rejectWithValue","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","console","log","fulfilled","action","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqCC,gBAArC,QAA6D,kBAA7D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AASA,MAAMC,IAAI,GAAG,OAAb;AAEA,MAAMC,YAAY,GAAG;AACpBD,EAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU,IADA;AAEpBE,EAAAA,OAAO,EAAE,KAFW;AAGpBC,EAAAA,SAAS,EAAE,KAHS;AAIpBC,EAAAA,SAAS,EAAE,KAJS;AAKpBC,EAAAA,OAAO,EAAE;AALW,CAArB;AAQA,OAAO,MAAMC,QAAQ,GAAGR,gBAAgB,CACvC,iBADuC;AAEvC;AAA4B,OAAOE,IAAP,EAAaO,QAAb,KAA0B;AACrD,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAW,oCAAX,EAAiDT,IAAjD,EAAuD;AAAEU,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAvD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAA5B;AACA,WAAOA,IAAP;AACA,GAJD,CAIE,OAAOC,KAAP,EAAmB;AACpB,UAAMP,OAAO,GAAGO,KAAK,CAACJ,QAAN,IAAkBI,KAAK,CAACJ,QAAN,CAAeG,IAAjD;AACA,WAAOJ,QAAQ,CAACM,eAAT,CAAyBR,OAAzB,CAAP;AACA;AACD,CAXsC,CAAjC;AAcP,OAAO,MAAMS,SAAS,GAAGjB,WAAW,CAAC;AACpCkB,EAAAA,IAAI,EAAE,MAD8B;AAEpCd,EAAAA,YAFoC;AAGpC;AACAe,EAAAA,QAAQ,EAAE;AACTC,IAAAA,KAAK,EAAGC,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACd,SAAN,GAAkBc,KAAK,CAAChB,OAAN,GAAgBgB,KAAK,CAACf,SAAN,GAAkB,KAApD;AACAe,MAAAA,KAAK,CAACb,OAAN,GAAgB,EAAhB;AACA;AAJQ,GAJ0B;AAUpC;AACAc,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC3BA,IAAAA,OAAO,CAACC,OAAR,CAAgBf,QAAQ,CAACgB,OAAzB,EAAmCJ,KAAD,IAAgB;AACjDK,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,KAFD,GAGCJ,OAAO,CAACC,OAAR,CAAgBf,QAAQ,CAACmB,SAAzB,EAAoC,CAACP,KAAD,EAAaQ,MAAb,KAA6B;AAChEH,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,KAFD,CAHD,EAMCJ,OAAO,CAACC,OAAR,CAAgBf,QAAQ,CAACqB,QAAzB,EAAmC,CAACT,KAAD,EAAaQ,MAAb,KAA6B;AAC/DH,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,KAFD,CAND;AASA;AArBmC,CAAD,CAA7B;AAwBP,OAAO,MAAM;AAAEP,EAAAA;AAAF,IAAYH,SAAS,CAACc,OAA5B;AACP,eAAed,SAAS,CAACe,OAAzB","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport interface Login {\n\tname: string;\n\temail: string;\n\tpassword: string;\n\tconfirmpassword: string;\n}\n\nconst user = 'hello';\n\nconst initialState = {\n\tuser: user ? user : null,\n\tisError: false,\n\tisSuccess: false,\n\tisLoading: false,\n\tmessage: '',\n};\n\nexport const register = createAsyncThunk(\n\t'auth/fetchLogin',\n\t/**  @param arg {object} */ async (user, thunkAPI) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('http://localhost:5000/api/register', user, { headers: { 'content-type': 'text/json' } });\n\t\t\tconst data = await response.data;\n\t\t\treturn data;\n\t\t} catch (error: any) {\n\t\t\tconst message = error.response && error.response.data;\n\t\t\treturn thunkAPI.rejectWithValue(message);\n\t\t}\n\t}\n);\n\nexport const authSlice = createSlice({\n\tname: 'auth',\n\tinitialState,\n\t// NOT ASYNC\n\treducers: {\n\t\treset: (state) => {\n\t\t\tstate.isLoading = state.isError = state.isSuccess = false;\n\t\t\tstate.message = '';\n\t\t},\n\t},\n\t// ASYNC\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(register.pending, (state: any) => {\n\t\t\tconsole.log('fetching exercises...');\n\t\t}),\n\t\t\tbuilder.addCase(register.fulfilled, (state: any, action: any) => {\n\t\t\t\tconsole.log('fetching exercises...');\n\t\t\t}),\n\t\t\tbuilder.addCase(register.rejected, (state: any, action: any) => {\n\t\t\t\tconsole.log('fetching exercises...');\n\t\t\t});\n\t},\n});\n\nexport const { reset } = authSlice.actions;\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}