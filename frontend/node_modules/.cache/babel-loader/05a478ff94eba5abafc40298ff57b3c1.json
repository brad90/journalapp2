{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport let LogType;\n\n(function (LogType) {\n  LogType[\"Log\"] = \"log\";\n  LogType[\"Answer\"] = \"answer\";\n})(LogType || (LogType = {}));\n\nconst options = [{\n  id: 1234,\n  type: LogType.Log,\n  title: '1Something happend today',\n  text: 'Today was when i meant to the shdisuh fsuidf h sdiufh si hf ....',\n  date: new Date()\n}, {\n  id: 1235,\n  type: LogType.Answer,\n  title: '2Something happend today',\n  text: 'Today was when i meant to the sidhfusd  sidfuhs difu  sdfhi....',\n  date: new Date()\n}, {\n  id: 1236,\n  type: LogType.Log,\n  title: '3Something happend today',\n  text: 'Today was when i meant to the sdfhsfi uh s sdiufh ....',\n  date: new Date()\n}, {\n  id: 1237,\n  type: LogType.Log,\n  title: '4Something happend today',\n  text: 'Today was when i meant to the ....',\n  date: new Date()\n}, {\n  id: 1238,\n  type: LogType.Answer,\n  title: '5Something happend today',\n  text: 'Today was when i meant to the ....',\n  date: new Date()\n}, {\n  id: 1239,\n  type: LogType.Answer,\n  title: '6Something happend today',\n  text: 'Today was when i meant to the ....',\n  date: new Date()\n}];\nconst initialState = {\n  logs: options || [],\n  points: 0,\n  currentLogID: null\n};\nexport const logsSlice = createSlice({\n  name: 'journallogs',\n  initialState,\n  reducers: {\n    setLogs: (state, action) => {\n      state.logs = action.payload;\n      state.points = action.payload.length;\n    },\n    setCurrentLogId: (state, action) => {\n      state.currentLogID = action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  setCurrentLogId\n} = logsSlice.actions;\nexport default logsSlice.reducer;","map":{"version":3,"sources":["/Users/stephen/business/journal-full/frontend/src/redux/logsSlice.ts"],"names":["createSlice","LogType","options","id","type","Log","title","text","date","Date","Answer","initialState","logs","points","currentLogID","logsSlice","name","reducers","setLogs","state","action","payload","length","setCurrentLogId","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,WAAYC,OAAZ;;WAAYA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;GAAAA,O,KAAAA,O;;AAcZ,MAAMC,OAAe,GAAG,CACvB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAEH,OAAO,CAACI,GAA1B;AAA+BC,EAAAA,KAAK,EAAE,0BAAtC;AAAkEC,EAAAA,IAAI,EAAE,kEAAxE;AAA4IC,EAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAlJ,CADuB,EAEvB;AAAEN,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAEH,OAAO,CAACS,MAA1B;AAAkCJ,EAAAA,KAAK,EAAE,0BAAzC;AAAqEC,EAAAA,IAAI,EAAE,iEAA3E;AAA8IC,EAAAA,IAAI,EAAE,IAAIC,IAAJ;AAApJ,CAFuB,EAGvB;AAAEN,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAEH,OAAO,CAACI,GAA1B;AAA+BC,EAAAA,KAAK,EAAE,0BAAtC;AAAkEC,EAAAA,IAAI,EAAE,wDAAxE;AAAkIC,EAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAxI,CAHuB,EAIvB;AAAEN,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAEH,OAAO,CAACI,GAA1B;AAA+BC,EAAAA,KAAK,EAAE,0BAAtC;AAAkEC,EAAAA,IAAI,EAAE,oCAAxE;AAA8GC,EAAAA,IAAI,EAAE,IAAIC,IAAJ;AAApH,CAJuB,EAKvB;AAAEN,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAEH,OAAO,CAACS,MAA1B;AAAkCJ,EAAAA,KAAK,EAAE,0BAAzC;AAAqEC,EAAAA,IAAI,EAAE,oCAA3E;AAAiHC,EAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAvH,CALuB,EAMvB;AAAEN,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAEH,OAAO,CAACS,MAA1B;AAAkCJ,EAAAA,KAAK,EAAE,0BAAzC;AAAqEC,EAAAA,IAAI,EAAE,oCAA3E;AAAiHC,EAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAvH,CANuB,CAAxB;AASA,MAAME,YAAgF,GAAG;AACxFC,EAAAA,IAAI,EAAEV,OAAO,IAAI,EADuE;AAExFW,EAAAA,MAAM,EAAE,CAFgF;AAGxFC,EAAAA,YAAY,EAAE;AAH0E,CAAzF;AAMA,OAAO,MAAMC,SAAS,GAAGf,WAAW,CAAC;AACpCgB,EAAAA,IAAI,EAAE,aAD8B;AAEpCL,EAAAA,YAFoC;AAGpCM,EAAAA,QAAQ,EAAE;AACTC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;AAClDD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACAF,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAP,CAAeC,MAA9B;AACA,KAJQ;AAKTC,IAAAA,eAAe,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA0C;AAC1DD,MAAAA,KAAK,CAACL,YAAN,GAAqBM,MAAM,CAACC,OAA5B;AACA;AAPQ;AAH0B,CAAD,CAA7B,C,CAcP;;AACA,OAAO,MAAM;AAAEE,EAAAA;AAAF,IAAsBR,SAAS,CAACS,OAAtC;AAEP,eAAeT,SAAS,CAACU,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport enum LogType {\n\tLog = 'log',\n\tAnswer = 'answer',\n}\n\nexport interface ILog {\n\tid: number;\n\ttype: LogType;\n\ttitle: string;\n\ttext: string;\n\tdate: Date;\n\ttags?: string[];\n}\n\nconst options: ILog[] = [\n\t{ id: 1234, type: LogType.Log, title: '1Something happend today', text: 'Today was when i meant to the shdisuh fsuidf h sdiufh si hf ....', date: new Date() },\n\t{ id: 1235, type: LogType.Answer, title: '2Something happend today', text: 'Today was when i meant to the sidhfusd  sidfuhs difu  sdfhi....', date: new Date() },\n\t{ id: 1236, type: LogType.Log, title: '3Something happend today', text: 'Today was when i meant to the sdfhsfi uh s sdiufh ....', date: new Date() },\n\t{ id: 1237, type: LogType.Log, title: '4Something happend today', text: 'Today was when i meant to the ....', date: new Date() },\n\t{ id: 1238, type: LogType.Answer, title: '5Something happend today', text: 'Today was when i meant to the ....', date: new Date() },\n\t{ id: 1239, type: LogType.Answer, title: '6Something happend today', text: 'Today was when i meant to the ....', date: new Date() },\n];\n\nconst initialState: { logs: [] | Ilog[]; points: number; currentLogID: null | number } = {\n\tlogs: options || [],\n\tpoints: 0,\n\tcurrentLogID: null,\n};\n\nexport const logsSlice = createSlice({\n\tname: 'journallogs',\n\tinitialState,\n\treducers: {\n\t\tsetLogs: (state, action: PayloadAction<ILog[]>) => {\n\t\t\tstate.logs = action.payload;\n\t\t\tstate.points = action.payload.length;\n\t\t},\n\t\tsetCurrentLogId: (state, action: PayloadAction<number>) => {\n\t\t\tstate.currentLogID = action.payload;\n\t\t},\n\t},\n});\n\n// Action creators are generated for each case reducer function\nexport const { setCurrentLogId } = logsSlice.actions;\n\nexport default logsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}